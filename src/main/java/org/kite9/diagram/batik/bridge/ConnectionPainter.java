package org.kite9.diagram.batik.bridge;

import java.awt.geom.GeneralPath;

import org.apache.batik.svggen.DefaultErrorHandler;
import org.apache.batik.svggen.DefaultStyleHandler;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGIDGenerator;
import org.apache.batik.svggen.SVGShape;
import org.kite9.diagram.batik.bridge.images.ResourceReferencerImageHandler;
import org.kite9.diagram.batik.format.BatikPaintExtensionHandler;
import org.kite9.diagram.batik.format.ElementNodeMapper;
import org.kite9.diagram.batik.format.ExtendedSVGGeneratorContext;
import org.kite9.diagram.batik.format.ResourceReferencer;
import org.kite9.diagram.model.Connection;
import org.kite9.framework.xml.StyledKite9SVGElement;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class ConnectionPainter extends AbstractSVGPainter<Connection>{

	 @Override
	protected void processOutput(StyledKite9SVGElement in, Element out, Document d, Connection r) {
		RoutePainter routePainter = new RoutePainter(0, 0);
		SVGShape shapeConverter = new SVGShape(buildSVGGeneratorContext(d, null, null));
		GeneralPath gp = routePainter.drawRouting(r.getRenderingInformation(), routePainter.NULL_END_DISPLAYER, routePainter.NULL_END_DISPLAYER, routePainter.LINK_HOP_DISPLAYER, false);
		Element path = shapeConverter.toSVG(gp);
		out.appendChild(path);
	}


	/**
    * Helper method to create an <code>SVGGeneratorContext</code> from the
    * constructor parameters.
    */
   public SVGGeneratorContext
       buildSVGGeneratorContext(Document domFactory, ResourceReferencer rr, ElementNodeMapper enm) {
       SVGGeneratorContext generatorCtx = new ExtendedSVGGeneratorContext(domFactory); 
       generatorCtx.setIDGenerator(new SVGIDGenerator());
       generatorCtx.setExtensionHandler(new BatikPaintExtensionHandler());
       generatorCtx.setImageHandler(new ResourceReferencerImageHandler(rr));
       generatorCtx.setStyleHandler(new DefaultStyleHandler());
       generatorCtx.setComment("Generated by the Batik Graphics2D SVG Generator");
       generatorCtx.setErrorHandler(new DefaultErrorHandler());
//       generatorCtx.setResourceReferencer(rr);
//       generatorCtx.setElementNodeMapper(enm);

       return generatorCtx;
   }

}
